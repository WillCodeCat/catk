#!/usr/bin/env node

var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var colors = require('colors');  
var version = require('../package.json')['version'];

function loadFile(name) {
  return fs.readFileSync(path.join(__dirname, '../', 'main',name), 'utf-8');
}
function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   create : '.green + path);
}
function mkdir(path, fn) {
  mkdirp(path, 0775, function(err){
    if (err) throw err;
    console.log('   create : '.green + path);
    fn && fn();
  });
}

function _mkdir(path, fn) {
  mkdirp(path, 0775, function(err){
    if (err) throw err;
    fn && fn();
  });
}

function createApplication(project_name) {

  var stat = fs.existsSync(project_name);
  if(stat){
    var result = fs.readdirSync(project_name);
    if(result[0] !== undefined){
      console.log('error: '.red+`Couldn't create a new catk app in "${process.cwd()}\\${project_name}" (directory is not empty)`);
      return;
    }
    
}


  var config = {};
  var lib = {};
  var now_date = new Date();
  var controllers = `'use strict'

 //IndexController.js
 //Create Date ${now_date}

module.exports = {

  index:function *(next){
    console.log('welcome use catk!');
    this.body = 'welcome use catk!';
    yield next;
  },
  

};`;
  var models = `'use strict'

 //user.js
 //Create Date ${now_date}
 //ORM Sequelize http://static.html-js.com/sequelizejs/index.html

module.exports = function(sequelize, DataTypes) {
  let user = sequelize.define('user',{
    id:{
      type : DataTypes.INTEGER,autoIncrement : true,primaryKey:true,unique:true
    },
    name:{
      type : DataTypes.STRING(16),allowNull: false
    },                                                                                                                                                                                                                                                          
    mobile: {
      type : DataTypes.STRING(11),allowNull: false
    },
    password : {
      type : DataTypes.STRING(32),allowNull: false
    },
    
  }, {
      freezeTableName: true, 
      createdAt:'add_time',
      updatedAt:'update_time',
      charset: 'utf8',
      collate: 'utf8_general_ci',
      classMethods: {
        associate: function(models) {
          //hasMany belongsTo............
        },
      }
    });

  user.sync({force: false});


  return user;

}`
  config.local = loadFile('config/local.js');
  config.models = loadFile('config/models.js');
  config.auth = loadFile('config/auth.js');
  config.routes = loadFile('config/routes.js');
  lib.catk = loadFile('lib/catk.js');
  lib.func = loadFile('lib/function.js');
  var app = loadFile('app.js');
	var package = `{
  "name": "${project_name}",
  "_catkVersion":"${version}",
  "version": "0.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
   "start": "node ./app.js"
  },
  "license": "ISC",
  "dependencies": {
    "co-busboy": "^1.3.1",
    "colors": "^1.1.2",
    "jwt-simple": "^0.5.0",
    "koa": "^1.2.0",
    "koa-bodyparser": "^2.0.1",
    "koa-cors": "0.0.16",
    "koa-json": "^1.1.1",
    "koa-logger": "^1.3.0",
    "koa-router": "^5.4.0",
    "koa-static": "^2.0.0",
    "moment": "^2.13.0",
    "mysql": "^2.10.2",
    "sequelize": "^3.22.0"
  }
}
`;

  mkdir(project_name,function(){

    mkdir(project_name+'/app/controllers',function(){
      write(project_name+'/app/controllers/IndexController.js', controllers);
      write(project_name+'/app/models/user.js', models);
    }); 
    
    mkdir(project_name+'/config',function(){
      write(project_name+'/config/local.js', config.local);
      write(project_name+'/config/models.js', config.models);
      write(project_name+'/config/routes.js', config.routes);
      write(project_name+'/config/auth.js', config.auth);
    });
    mkdir(project_name+'/assets',function(){
      mkdir(project_name+'/assets/images');
    });
    mkdir(project_name+'/lib',function(){
      write(project_name+'/lib/catk.js', lib.catk);
      write(project_name+'/lib/function.js', lib.func);
      write(project_name+'/app.js', app);
      write(project_name+'/package.json', package);
      write(project_name+'/README.md', 'a catk application');
      
      mkdir(project_name+'/app/models',function(){
          mkdir(project_name+'/app/Logs',function(){
            console.log();
            console.log("   success!".green);
            console.log();
            console.log('   install dependencies:');
            console.log('    cd %s && npm install'.cyan, project_name);
            console.log();
            console.log('   run the app:');
            console.log('    npm start'.cyan);
          });
        
      });
      
    });
  });

}

var agrv = process.argv;
var now_date = new Date();
if(agrv[2] === '-v'){
  console.log(version);
}else if(agrv[2] === 'new'){//create project
  if(agrv[3] === undefined) {
    console.log('error: '.red+'no project name!');
  }else{
    createApplication(agrv[3]);
  }
}else if(agrv[2] === 'generate'){
  if(agrv[3] === 'controller') {//create controller
     if(agrv[4] === undefined) {
        console.log('error: '.red+'no controller name!');
     }else{
      _path = agrv[4].split('/');
      var _dir = '';
      for(var i = 0;i<_path.length-1;i++){
        if(_path[i] !== ''){
          _path[i] = '/'+_path[i];
          _dir = _dir +_path[i];
        }
      }
      var stat = fs.existsSync('./app/controllers'+_dir+'/'+_path[_path.length-1]+'Controller.js');
      if(stat){
        console.log('error: '.red+`Couldn't create a new ${_path[_path.length-1]} controller in "./app/controllers${_dir}/" (${_path[_path.length-1]}Controller.js already exist)`);
        return;
      }
      _mkdir('./app/controllers'+_dir,function(){
      write('./app/controllers'+_dir+'/'+_path[_path.length-1]+'Controller.js',`'use strict'

 //${agrv[4]}Controller.js
 //Create Date ${now_date}

module.exports = {
  
  index: function *(next){
    
    yield next;
  }
}`);
      });


 }
  }else if(agrv[3] === 'model') {//create model

      _path = agrv[4].split('/');
      var _dir = '';
      for(var i = 0;i<_path.length-1;i++){
        if(_path[i] !== ''){
          _path[i] = '/'+_path[i];
          _dir = _dir +_path[i];
        }
      }

      var stat = fs.existsSync('./app/models'+_dir+'/'+_path[_path.length-1]+'.js');
      if(stat){
        console.log('error: '.red+`Couldn't create a new ${_path[_path.length-1]} models in "./app/models${_dir}/" (${_path[_path.length-1]}.js already exist)`);
        return;
      }

      _mkdir('./app/models'+_dir,function(){
      write('./app/models'+_dir+'/'+_path[_path.length-1]+'.js',`'use strict'

 //${agrv[4]}.js
 //Create Date ${now_date}
 //ORM Sequelize http://static.html-js.com/sequelizejs/index.html

module.exports = function(sequelize, DataTypes) {
  let ${agrv[4]} = sequelize.define('${agrv[4]}',{
    id:{
      type : DataTypes.INTEGER,autoIncrement : true,primaryKey:true,unique:true
    },
  }, {
      freezeTableName: true, 
      createdAt:'add_time',
      updatedAt:'update_time',
      charset: 'utf8',
      collate: 'utf8_general_ci',
      classMethods: {
        associate: function(models) {
          //hasMany belongsTo............
        },
      }
    });

  ${agrv[4]}.sync({force: false});


  return ${agrv[4]};

}`);
      });
  }else{
    console.log('command not found!');


  }
}else{
  console.log(`
  Usage: catk [command]

  Commands:

    version
    new [path_to_new_app]
    generate controller [controller_name] or generate controller [path/controller_name] 
    generate model [model_name] or generate model [path/model_name]
    help

  Options:

    -h, --help     output usage information
    -v, --version  output the version number
    `);
}

